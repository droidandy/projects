#!groovy
pipeline {
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  agent {
    node {
      label 'buildfarm'
    }
  }
  tools {
    nodejs '6.10.0_default'
  }
  environment {
    DEV_TOKEN_SECRET = credentials('AWS_DEV_ACCESS_SECRET')
    DEV_MIXPANEL_KEY = credentials('DEV_MIXPANEL_KEY')

    PROD_MIXPANEL_KEY = credentials('PROD_MIXPANEL_KEY')
    PROD_UHC_TOKEN_SECRET = credentials('PROD_UHC_AWS_ACCESS_SECRET')
    PROD_ANT_TOKEN_SECRET = credentials('PROD_ANT_AWS_ACCESS_SECRET')
    PROD_BRK_TOKEN_SECRET = credentials('PROD_AWS_ACCESS_SECRET')

    AUTH0_UHC_CLIENT_ID = 'Wr7IfZ2RgMPHRVp2Fp0KDuCEDMC5OquN'
    AUTH0_UHC_DOMAIN = 'login-uhc.benrevo.com'
    AUTH0_UHC_DOMAIN_LOGIN = 'https://login.auth0.com/api/v2'

    AUTH0_ANT_CLIENT_ID = 'vUQO5uURGku5InNzUwlFnWN127hQL4il'
    AUTH0_ANT_DOMAIN = 'login-anthem.benrevo.com'
    AUTH0_ANT_DOMAIN_LOGIN = 'https://login.auth0.com/api/v2'

    AUTH0_BRK_CLIENT_ID = 'iq5YLWovS1yfIm1hZKLc9m8E4zxlwbzf'
    AUTH0_BRK_DOMAIN = 'login.benrevo.com'
    AUTH0_BRK_DOMAIN_LOGIN = 'https://login.auth0.com/api/v2'

    DEV_UHC_BENREVO_API_PATH = 'https://dev.api.superadmin.ops.benrevo.com'
    DEV_ANT_BENREVO_API_PATH = 'https://devantapi.superadmin.ops.benrevo.com'
    DEV_BRK_BENREVO_API_PATH = 'https://dev-api-app.superadmin.ops.benrevo.com'

    STAGE_UHC_BENREVO_API_PATH = 'https://stage.api.superadmin.ops.benrevo.com'
    STAGE_ANT_BENREVO_API_PATH = 'https://stageantapi.superadmin.ops.benrevo.com'
    STAGE_BRK_BENREVO_API_PATH = 'https://stage.app.benrevo.com/brk'

    PROD_UHC_BENREVO_API_PATH = 'https://api.superadmin.ops.benrevo.com'
    PROD_ANT_BENREVO_API_PATH = 'https://apiant.superadmin.ops.benrevo.com'
    PROD_BRK_BENREVO_API_PATH = 'https://api-app.superadmin.ops.benrevo.com'

    DEV_TOKEN_ID = 'AKIAIEV2Q2CEUNPABDKA'
    PROD_UHC_TOKEN_ID = 'AKIAJMGGUG3HSUXCOGBA'
    PROD_ANT_TOKEN_ID = 'AKIAILFFQT66VOH6U4YA'
    PROD_BRK_TOKEN_ID = 'AKIAJ6XKUDVFMYBEV2GQ'

    COVERALLS_REPO_TOKEN = credentials('BENREVO_ADMIN_SITE_COVERALLS_REPO_TOKEN')
    COVERALLS_SERVICE_NAME = 'Jenkins'

    NODE_OPTIONS = "--max-old-space-size=2048"
  }
  stages {
    stage('Setup') {
      parallel {
        stage('UHC') {
          steps {
            ws("${BUILD_TAG}uhc") {
              wrap([$class: 'BuildUser']) {
                slackSend message: "Starting build: ${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME} caused by ${env.BUILD_USER_ID}."
              }
              checkout(
                [
                  $class: 'GitSCM',
                  branches: [[name: '${BRANCH_NAME}']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [],
                  submoduleCfg: [],
                  userRemoteConfigs: [[
                    credentialsId: '81e0269c-8b0b-4eeb-97f2-03da4cb75100',
                    url: 'https://github.com/BenRevo/benrevo-admin-site.git'
                  ]]
                ]
              )
              sh '''
npm install
              '''
            }
          }
        }
        stage('Anthem') {
          steps {
            ws("${BUILD_TAG}ant") {
              wrap([$class: 'BuildUser']) {
                slackSend message: "Starting build: ${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME} caused by ${env.BUILD_USER_ID}."
              }
              checkout(
                [
                  $class: 'GitSCM',
                  branches: [[name: '${BRANCH_NAME}']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [],
                  submoduleCfg: [],
                  userRemoteConfigs: [[
                    credentialsId: '81e0269c-8b0b-4eeb-97f2-03da4cb75100',
                    url: 'https://github.com/BenRevo/benrevo-admin-site.git'
                  ]]
                ]
              )
              sh '''
npm install
              '''
            }
          }
        }
        stage('Broker') {
          steps {
            ws("${BUILD_TAG}brk") {
              wrap([$class: 'BuildUser']) {
                slackSend message: "Starting build: ${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME} caused by ${env.BUILD_USER_ID}."
              }
              checkout(
                [
                  $class: 'GitSCM',
                  branches: [[name: '${BRANCH_NAME}']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [],
                  submoduleCfg: [],
                  userRemoteConfigs: [[
                    credentialsId: '81e0269c-8b0b-4eeb-97f2-03da4cb75100',
                    url: 'https://github.com/BenRevo/benrevo-admin-site.git'
                  ]]
                ]
              )
              sh '''
npm install
              '''
            }
          }
        }
      }
    }
    stage('Test') {
      parallel {
        stage('UHC') {
          steps {
            ws("${BUILD_TAG}uhc") {
              sh '''
export CARRIER="UHC"
npm test
              '''
            }
          }
        }
        stage('Anthem') {
          steps {
            ws("${BUILD_TAG}ant") {
              sh '''
export CARRIER="ANTHEM"
npm test
              '''
            }
          }
        }
        stage('Broker') {
          steps {
            ws("${BUILD_TAG}brk") {
              sh '''
export CARRIER="BENREVO"
npm test
              '''
            }
          }
        }
      }
    }
    stage('Build') {
      parallel {
        stage('UHC') {
          steps {
            ws("${BUILD_TAG}uhc") {
              sh '''
#!/bin/bash -xe

export CARRIER="UHC"
export AUTH0_CLIENT_ID=$AUTH0_UHC_CLIENT_ID
export AUTH0_DOMAIN=$AUTH0_UHC_DOMAIN
export AUTH0_DOMAIN_LOGIN=$AUTH0_UHC_DOMAIN_LOGIN
export CARRIER_PLACEHOLDER="uhc"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export MIXPANEL_KEY=$DEV_MIXPANEL_KEY
    export BENREVO_API_PATH=$DEV_UHC_BENREVO_API_PATH
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export MIXPANEL_KEY=$DEV_MIXPANEL_KEY
    export BENREVO_API_PATH=$STAGE_UHC_BENREVO_API_PATH
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export MIXPANEL_KEY=$PROD_MIXPANEL_KEY
    export BENREVO_API_PATH=$PROD_UHC_BENREVO_API_PATH
fi

export PATH=$PATH:$HOME/.local/bin
npm run build
              '''
            }
          }
        }
        stage('Anthem') {
          steps {
            ws("${BUILD_TAG}ant") {
              sh '''
#!/bin/bash -xe

export CARRIER="ANTHEM"
export AUTH0_CLIENT_ID=$AUTH0_ANT_CLIENT_ID
export AUTH0_DOMAIN=$AUTH0_ANT_DOMAIN
export AUTH0_DOMAIN_LOGIN=$AUTH0_ANT_DOMAIN_LOGIN
export CARRIER_PLACEHOLDER="anthem"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export MIXPANEL_KEY=$DEV_MIXPANEL_KEY
    export BENREVO_API_PATH=$DEV_ANT_BENREVO_API_PATH
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export MIXPANEL_KEY=$DEV_MIXPANEL_KEY
    export BENREVO_API_PATH=$STAGE_ANT_BENREVO_API_PATH
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export MIXPANEL_KEY=$PROD_MIXPANEL_KEY
    export BENREVO_API_PATH=$PROD_ANT_BENREVO_API_PATH
fi

export PATH=$PATH:$HOME/.local/bin
npm run build
              '''
            }
          }
        }
        stage('Broker') {
          steps {
            ws("${BUILD_TAG}brk") {
              sh '''
#!/bin/bash -xe

export CARRIER="BENREVO"
export AUTH0_CLIENT_ID=$AUTH0_BRK_CLIENT_ID
export AUTH0_DOMAIN=$AUTH0_BRK_DOMAIN
export AUTH0_DOMAIN_LOGIN=$AUTH0_BRK_DOMAIN_LOGIN
export CARRIER_PLACEHOLDER="benrevo"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export MIXPANEL_KEY=$DEV_MIXPANEL_KEY
    export BENREVO_API_PATH=$DEV_BRK_BENREVO_API_PATH
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export MIXPANEL_KEY=$DEV_MIXPANEL_KEY
    export BENREVO_API_PATH=$STAGE_BRK_BENREVO_API_PATH
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export MIXPANEL_KEY=$PROD_MIXPANEL_KEY
    export BENREVO_API_PATH=$PROD_BRK_BENREVO_API_PATH
fi

export PATH=$PATH:$HOME/.local/bin
npm run build
              '''
            }
          }
        }
      }
    }
    stage('Dockerize: UHC') {
      steps {
        ws("${BUILD_TAG}uhc") {
          sh '''
#!/bin/bash -xe

export CARRIER="UHC"
export CARRIER_PLACEHOLDER="uhc"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export DOCKER_BUILD_NAME="fe-superadmin-dev"
    export DOCKER_TAG_NAME="434704177489.dkr.ecr.us-east-1.amazonaws.com/fe-superadmin-dev:latest"
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-dev"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
    export DEPLOY_FILE_PATH="dev"
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export DOCKER_BUILD_NAME="fe-superadmin-stage"
    export DOCKER_TAG_NAME="434704177489.dkr.ecr.us-east-1.amazonaws.com/fe-superadmin-stage:latest"
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-stage"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
    export DEPLOY_FILE_PATH="stage"
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export DOCKER_BUILD_NAME="prd-benrevo-superadmin-fe"
    export DOCKER_TAG_NAME="252508284068.dkr.ecr.us-west-2.amazonaws.com/prd-benrevo-superadmin-fe:latest"
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="PRD-SUPERADMIN-FE"
    export AWS_ACCESS_KEY_ID=$PROD_UHC_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_UHC_TOKEN_SECRET
    export DEPLOY_FILE_PATH="prod"
fi

export PATH=$PATH:$HOME/.local/bin

if [ "$(aws sts get-caller-identity | grep -c 'UserId')" -eq 1 ]
then
    echo "##### Successful authorization from AWS"
fi

mkdir -p ./.elasticbeanstalk/
mkdir -p ./.ebextensions/

cp ./internals/deploy/01_nginx.config ./.ebextensions/01_nginx.config
cp ./internals/deploy/$CARRIER_PLACEHOLDER/$DEPLOY_FILE_PATH/config.yml ./.elasticbeanstalk/config.yml
cp ./internals/deploy/$CARRIER_PLACEHOLDER/$DEPLOY_FILE_PATH/Dockerrun.aws.json ./Dockerrun.aws.json

docker build -t $DOCKER_BUILD_NAME .

docker tag $DOCKER_BUILD_NAME:latest $DOCKER_TAG_NAME
eval $(aws ecr get-login --no-include-email --region "${AWS_REGION_NAME}")
docker push $DOCKER_TAG_NAME
          '''
        }
      }
    }
    stage('Dockerize: Anthem') {
      steps {
        ws("${BUILD_TAG}ant") {
          sh '''
#!/bin/bash -xe

export CARRIER="ANTHEM"
export CARRIER_PLACEHOLDER="anthem"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export DOCKER_BUILD_NAME="fe-superadmin-dev-ant"
    export DOCKER_TAG_NAME="434704177489.dkr.ecr.us-east-1.amazonaws.com/fe-superadmin-dev-ant:latest"
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-dev-anthem"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
    export DEPLOY_FILE_PATH="dev"
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export DOCKER_BUILD_NAME="fe-superadmin-anthem-stage"
    export DOCKER_TAG_NAME="434704177489.dkr.ecr.us-east-1.amazonaws.com/fe-superadmin-anthem-stage:latest"
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-anthem-stage"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
    export DEPLOY_FILE_PATH="stage"
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export DOCKER_BUILD_NAME="prd-benrevo-superadmin-fe"
    export DOCKER_TAG_NAME="218450561239.dkr.ecr.us-west-2.amazonaws.com/prd-benrevo-superadmin-fe:latest"
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="PRD-ANT-frontendSuperAdmin"
    export AWS_ACCESS_KEY_ID=$PROD_ANT_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_ANT_TOKEN_SECRET
    export DEPLOY_FILE_PATH="prod"
fi

export PATH=$PATH:$HOME/.local/bin

if [ "$(aws sts get-caller-identity | grep -c 'UserId')" -eq 1 ]
then
    echo "##### Successful authorization from AWS"
fi

mkdir -p ./.elasticbeanstalk/
mkdir -p ./.ebextensions/

cp ./internals/deploy/01_nginx.config ./.ebextensions/01_nginx.config
cp ./internals/deploy/$CARRIER_PLACEHOLDER/$DEPLOY_FILE_PATH/config.yml ./.elasticbeanstalk/config.yml
cp ./internals/deploy/$CARRIER_PLACEHOLDER/$DEPLOY_FILE_PATH/Dockerrun.aws.json ./Dockerrun.aws.json

docker build -t $DOCKER_BUILD_NAME .

docker tag $DOCKER_BUILD_NAME:latest $DOCKER_TAG_NAME
eval $(aws ecr get-login --no-include-email --region "${AWS_REGION_NAME}")
if [ "$GIT_BRANCH" = "develop" ]; then
  docker push $DOCKER_TAG_NAME
fi
          '''
        }
      }
    }
    stage('Dockerize: Broker') {
      steps {
        ws("${BUILD_TAG}brk") {
          sh '''
#!/bin/bash -xe

export CARRIER="BENREVO"
export CARRIER_PLACEHOLDER="benrevo"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export DOCKER_BUILD_NAME="dev-benrevo-admin-fe"
    export DOCKER_TAG_NAME="434704177489.dkr.ecr.us-west-2.amazonaws.com/dev-benrevo-admin-fe:latest"
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="dev-benrevo-admin-fe"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
    export DEPLOY_FILE_PATH="dev"
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export DOCKER_BUILD_NAME="stage-benrevo-admin-fe"
    export DOCKER_TAG_NAME="434704177489.dkr.ecr.us-west-2.amazonaws.com/stage-benrevo-admin-fe:latest"
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="stage-benrevo-admin-fe"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
    export DEPLOY_FILE_PATH="stage"
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export DOCKER_BUILD_NAME="prod-benrevo-admin-fe"
    export DOCKER_TAG_NAME="871243115801.dkr.ecr.us-west-2.amazonaws.com/prod-benrevo-admin-fe:latest"
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="prod-benrevo-admin-fe"
    export AWS_ACCESS_KEY_ID=$PROD_BRK_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_BRK_TOKEN_SECRET
    export DEPLOY_FILE_PATH="prod"
fi

export PATH=$PATH:$HOME/.local/bin

if [ "$(aws sts get-caller-identity | grep -c 'UserId')" -eq 1 ]
then
    echo "##### Successful authorization from AWS"
fi

mkdir -p ./.elasticbeanstalk/
mkdir -p ./.ebextensions/

cp ./internals/deploy/01_nginx.config ./.ebextensions/01_nginx.config
cp ./internals/deploy/$CARRIER_PLACEHOLDER/$DEPLOY_FILE_PATH/config.yml ./.elasticbeanstalk/config.yml
cp ./internals/deploy/$CARRIER_PLACEHOLDER/$DEPLOY_FILE_PATH/Dockerrun.aws.json ./Dockerrun.aws.json

docker build -t $DOCKER_BUILD_NAME .

docker tag $DOCKER_BUILD_NAME:latest $DOCKER_TAG_NAME
eval $(aws ecr get-login --no-include-email --region "${AWS_REGION_NAME}")
docker push $DOCKER_TAG_NAME
          '''
        }
      }
    }
    stage('Deploy') {
      parallel {
        stage('UHC') {
          steps {
            ws("${BUILD_TAG}uhc") {
              sh '''
#!/bin/bash -xe

export CARRIER="UHC"
export CARRIER_PLACEHOLDER="uhc"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-dev"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-stage"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="PRD-SUPERADMIN-FE"
    export AWS_ACCESS_KEY_ID=$PROD_UHC_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_UHC_TOKEN_SECRET
fi

if [ "$(aws sts get-caller-identity | grep -c 'UserId')" -eq 1 ]
then
    echo "##### Successful authorization from AWS"
fi

eb deploy $AWS_DEPLOY_NAME --label "$BUILD_TAG:$CARRIER_PLACEHOLDER" --verbose --staged
              '''
            }
          }
        }
        stage('Anthem') {
          steps {
            ws("${BUILD_TAG}ant") {
              sh '''
#!/bin/bash -xe

export CARRIER="ANTHEM"
export CARRIER_PLACEHOLDER="anthem"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-dev-anthem"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="fe-superadmin-anthem-stage"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="PRD-ANT-frontendSuperAdmin"
    export AWS_ACCESS_KEY_ID=$PROD_ANT_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_ANT_TOKEN_SECRET
fi

if [ "$(aws sts get-caller-identity | grep -c 'UserId')" -eq 1 ]
then
    echo "##### Successful authorization from AWS"
fi

if [ "${GIT_BRANCH}" = "develop" ]
then
    eb deploy $AWS_DEPLOY_NAME --label "$BUILD_TAG:$CARRIER_PLACEHOLDER" --verbose --staged
fi
              '''
            }
          }
        }
        stage('Broker') {
          steps {
            ws("${BUILD_TAG}brk") {
              sh '''
#!/bin/bash -xe

export CARRIER="BENREVO"
export CARRIER_PLACEHOLDER="benrevo"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="dev-benrevo-admin-fe"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="stage-benrevo-admin-fe"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="prod-benrevo-admin-fe"
    export AWS_ACCESS_KEY_ID=$PROD_BRK_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_BRK_TOKEN_SECRET
fi

if [ "$(aws sts get-caller-identity | grep -c 'UserId')" -eq 1 ]
then
    echo "##### Successful authorization from AWS"
fi

eb deploy $AWS_DEPLOY_NAME --label "$BUILD_TAG:$CARRIER_PLACEHOLDER" --verbose --staged --timeout 30
              '''
            }
          }
        }
      }
    }
  }
  post {
    failure {
      wrap([$class: 'BuildUser']) {
        slackSend color: "danger", message: "Build failed: ${JOB_NAME} ${BUILD_DISPLAY_NAME} caused by ${env.CHANGE_AUTHOR}. Build results: ${RUN_DISPLAY_URL}"
        emailext body: '${JOB_NAME} ${BUILD_DISPLAY_NAME} - failed: Check console output at ${RUN_DISPLAY_URL} to view the results.', recipientProviders: [[$class: 'CulpritsRecipientProvider']], subject: 'Build failed: ${JOB_NAME} ${BUILD_DISPLAY_NAME}'
      }
    }
    success {
      wrap([$class: 'BuildUser']) {
        slackSend color: "good", message: "Build success: ${JOB_NAME} ${BUILD_DISPLAY_NAME} caused by ${env.CHANGE_AUTHOR}. Build results: ${RUN_DISPLAY_URL}"
        emailext body: '${JOB_NAME} ${BUILD_DISPLAY_NAME} - success: Check console output at ${RUN_DISPLAY_URL} to view the results.', recipientProviders: [[$class: 'CulpritsRecipientProvider']], subject: 'Build success: ${JOB_NAME} ${BUILD_DISPLAY_NAME}'
      }
    }
  }
}
