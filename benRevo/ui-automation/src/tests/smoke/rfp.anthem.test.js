import Login from '../../pages/login';
import ClientsPage from '../../pages/clients/clients'
import ClientInformationTab from '../../pages/rfp/client/information'
import ClientProductsTab from '../../pages/rfp/client/products'
import InformationTab from '../../pages/rfp/medical/information'
import CurrentOptionsTab from '../../pages/rfp/medical/current-options'
import ContributionTab from '../../pages/rfp/medical/contribution'
import PlansQuoteTab from '../../pages/rfp/medical/plans-quote'
import RatesMedicalTab from '../../pages/rfp/rates/medical'
import EnroMedicalTab from '../../pages/rfp/enro/medical'
import AddTeamTab from '../../pages/rfp/add_team/add-team'
import SendToUhc from '../../pages/send/send-to-uhc'
import Util from '../../utils/Util'
import Data from '../../utils/data'
import {BENREVO_WEBSITE} from '../../../config.js';

const loginPage = new Login();
const clientsPage = new ClientsPage();
const clientInformation = new ClientInformationTab();
const clientProductsTab = new ClientProductsTab();
const informationTab = new InformationTab();
const currentOptionsTab = new CurrentOptionsTab();
const contributionTab = new ContributionTab();
const plansQuoteTab = new PlansQuoteTab();
const ratesTab = new RatesMedicalTab();
const enroTab = new EnroMedicalTab();
const addTeamTab = new AddTeamTab();
const sendToUhc = new SendToUhc();
const util = new Util();
const data = new Data();

fixture`Rfp page`
    .page `${BENREVO_WEBSITE}/anthem/login`
    .beforeEach(
        async () => {
            await loginPage.loginUser('automation@benrevo.com', 'aut0mati0n!');
        });

test('ANTHEM: Create new RFP, check `error message`.', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .click(clientInformation.saveContinue)
        .expect(clientProductsTab.errorMessage.textContent).eql(data.getClient().somethingWentWrong)
        .click(clientProductsTab.medicalProduct)
        .expect(clientProductsTab.visionVirgin.exists).ok()
        .click(clientProductsTab.visionVirgin)
        .click(clientProductsTab.dentalProduct)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .expect(clientProductsTab.errorMessage.textContent).eql(data.getClient().errorCreateClient)
        .click(informationTab.saveContinue)
        .click(currentOptionsTab.saveContinue)
        .click(contributionTab.saveContinue)
        .click(plansQuoteTab.saveContinue)
        .click(addTeamTab.saveContinue)
        .expect(addTeamTab.errorManageTeam.textContent).eql(data.getClient().errorTeamManaging)

});

test('ANTHEM: Create new RFP, check `To send selected RFP, you need to fill in all the fields`.', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.membersCount, data.getClient().membersCount)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.medicalProduct)
        .expect(clientProductsTab.visionVirgin.exists).ok()
        .click(clientProductsTab.visionVirgin)
        .click(clientProductsTab.dentalProduct)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .click(informationTab.saveContinue)
        .click(currentOptionsTab.saveContinue)
        .click(contributionTab.saveContinue)
        .click(plansQuoteTab.saveContinue)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.errorMessage.exists).ok

});

test('ANTHEM: Create new RFP with Medical only', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.dentalProduct)
        .click(clientProductsTab.visionProduct)
        .click(clientProductsTab.saveContinue)
        .typeText(informationTab.waitingPeriod, data.getClient().waitingPeriod)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.yearsHaveYouBeenWithCarrier)
        .click(informationTab.yearsHaveYouBeenWithCarrierSelect)
        .click(informationTab.yearsHaveYouBeenWithCarrierPreviously)
        .click(informationTab.yearsHaveYouBeenWithCarrierPreviouslySelect)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().carrier)
        .typeText(currentOptionsTab.type, data.getClient().type)
        .typeText(currentOptionsTab.networkName, data.getClient().networkName)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().incumbentPlanName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .setFilesToUpload(plansQuoteTab.uploadBenefit, data.getClient().uploadBenefit)
        .setFilesToUpload(plansQuoteTab.uploadBenefitSummary, data.getClient().uploadBenefit)
        .click(plansQuoteTab.saveContinue)
        .typeText(ratesTab.basePlanTierOne, data.getClient().basePlanTierOne)
        .typeText(ratesTab.outOfStateRatesValue, data.getClient().outOfStateRatesValue)
        .typeText(ratesTab.renewalTierOne, data.getClient().renewalTierOne)
        .typeText(ratesTab.renewalOutOfStateRatesValue, data.getClient().renewalOutOfStateRatesValue)
        .click(ratesTab.saveContinue)
        .typeText(enroTab.basePlanTierOne, data.getClient().basePlanTierOne)
        .typeText(enroTab.outOfStateRatesValue, data.getClient().outOfStateRatesValue)
        .click(enroTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)

});

test('ANTHEM: Create new RFP with Dental only', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.medicalProduct)
        .click(clientProductsTab.visionProduct)
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.yearsHaveYouBeenWithCarrier)
        .click(informationTab.yearsHaveYouBeenWithCarrierSelect)
        .click(informationTab.yearsHaveYouBeenWithCarrierPreviously)
        .click(informationTab.yearsHaveYouBeenWithCarrierPreviouslySelect)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().carrier)
        .typeText(currentOptionsTab.type, data.getClient().type)
        .typeText(currentOptionsTab.networkName, data.getClient().networkName)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().incumbentPlanName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .setFilesToUpload(plansQuoteTab.uploadBenefit, data.getClient().uploadBenefit)
        .click(plansQuoteTab.saveContinue)
        .typeText(ratesTab.basePlanTierOne, data.getClient().basePlanTierOne)
        .typeText(ratesTab.outOfStateRatesValue, data.getClient().outOfStateRatesValue)
        .typeText(ratesTab.renewalTierOne, data.getClient().renewalTierOne)
        .typeText(ratesTab.renewalOutOfStateRatesValue, data.getClient().renewalOutOfStateRatesValue)
        .click(ratesTab.saveContinue)
        .typeText(enroTab.basePlanTierOne, data.getClient().basePlanTierOne)
        .typeText(enroTab.outOfStateRatesValue, data.getClient().outOfStateRatesValue)
        .click(enroTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)


});

test('ANTHEM: Create new RFP with Vision only', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.medicalProduct)
        .click(clientProductsTab.dentalProduct)
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.yearsHaveYouBeenWithCarrier)
        .click(informationTab.yearsHaveYouBeenWithCarrierSelect)
        .click(informationTab.yearsHaveYouBeenWithCarrierPreviously)
        .click(informationTab.yearsHaveYouBeenWithCarrierPreviouslySelect)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().carrier)
        .typeText(currentOptionsTab.type, data.getClient().type)
        .typeText(currentOptionsTab.networkName, data.getClient().networkName)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().incumbentPlanName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .setFilesToUpload(plansQuoteTab.uploadBenefit, data.getClient().uploadBenefit)
        .click(plansQuoteTab.saveContinue)
        .typeText(ratesTab.basePlanTierOne, data.getClient().basePlanTierOne)
        .typeText(ratesTab.outOfStateRatesValue, data.getClient().outOfStateRatesValue)
        .typeText(ratesTab.renewalTierOne, data.getClient().renewalTierOne)
        .typeText(ratesTab.renewalOutOfStateRatesValue, data.getClient().renewalOutOfStateRatesValue)
        .click(ratesTab.saveContinue)
        .typeText(enroTab.basePlanTierOne, data.getClient().basePlanTierOne)
        .typeText(enroTab.outOfStateRatesValue, data.getClient().outOfStateRatesValue)
        .click(enroTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)

});

test('ANTHEM: Create new RFP with Vision Virgin only', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.medicalProduct)
        .expect(clientProductsTab.visionVirgin.exists).ok()
        .click(clientProductsTab.visionVirgin)
        .click(clientProductsTab.dentalProduct)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().carrier)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().incumbentPlanName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .typeText(plansQuoteTab.additionalRequests, data.getClient().additionalRequests)
        .click(plansQuoteTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)

});

test('ANTHEM: Create new RFP with Vision Virgin only, submit to anthem', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.medicalProduct)
        .expect(clientProductsTab.visionVirgin.exists).ok()
        .click(clientProductsTab.visionVirgin)
        .click(clientProductsTab.dentalProduct)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().carrier)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().incumbentPlanName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .typeText(plansQuoteTab.additionalRequests, data.getClient().additionalRequests)
        .click(plansQuoteTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)
        .click(sendToUhc.submitToAnthem)
});

test('ANTHEM: Create new RFP with Medical Virgin only', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.visionProduct)
        .click(clientProductsTab.dentalProduct)
        .expect(clientProductsTab.medicalVirgin.exists).ok()
        .click(clientProductsTab.medicalVirgin)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.waitingPeriod, data.getClient().waitingPeriod)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().typeHmo)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().planName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .typeText(plansQuoteTab.additionalRequestsMedical, data.getClient().additionalRequests)
        .click(plansQuoteTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)

});

test('ANTHEM: Create new RFP with Medical Virgin only, submit to anthem', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.visionProduct)
        .click(clientProductsTab.dentalProduct)
        .expect(clientProductsTab.medicalVirgin.exists).ok()
        .click(clientProductsTab.medicalVirgin)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.waitingPeriod, data.getClient().waitingPeriod)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().typeHmo)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().planName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .typeText(plansQuoteTab.additionalRequestsMedical, data.getClient().additionalRequests)
        .click(plansQuoteTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)
        .click(sendToUhc.submitToAnthem)
});

test('ANTHEM: Create new RFP with Dental Virgin only, submit to anthem', async t => {

    await  t.wait(3000)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.medicalProduct)
        .expect(clientProductsTab.dentalVirgin.exists).ok()
        .click(clientProductsTab.dentalVirgin)
        .click(clientProductsTab.visionProduct)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().typeHmo)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().planName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .typeText(plansQuoteTab.additionalRequestsMedical, data.getClient().additionalRequests)
        .click(plansQuoteTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)
        .click(sendToUhc.submitToAnthem)
});

test('ANTHEM: Create new RFP with Dental Virgin only', async t => {

    await  t.wait(3500)
        .switchToIframe(clientsPage.frameChat)
        .click(clientsPage.closeHelpDesk)
        .switchToMainWindow()
        .expect(clientsPage.startNewRfp.exists).ok()
        .click(clientsPage.startNewRfp)
        .click(clientsPage.continue)
        .typeText(clientInformation.clientName, `${data.getClient().clientName} ${util.getFullTodayDate()}`)
        .typeText(clientInformation.sicCode, data.getClient().sicCode)
        .typeText(clientInformation.employeeCount, data.getClient().employeeCount)
        .typeText(clientInformation.eligibleEmployees, data.getClient().eligibleEmployees)
        .typeText(clientInformation.participatingEmployees, data.getClient().participatingEmployees)
        .typeText(clientInformation.retireesCount, data.getClient().retireesCount)
        .typeText(clientInformation.cobraCount, data.getClient().cobraCount)
        .typeText(clientInformation.address, data.getClient().address)
        .typeText(clientInformation.city, data.getClient().city)
        .typeText(clientInformation.state, data.getClient().state)
        .typeText(clientInformation.zip, data.getClient().zip)
        .typeText(clientInformation.predominantCounty, data.getClient().predominantCounty)
        .typeText(clientInformation.averageAge, data.getClient().averageAge)
        .typeText(clientInformation.minimumHours, data.getClient().minimumHours)
        .typeText(clientInformation.effectiveDate, util.getTodayDate())
        .typeText(clientInformation.dueDate, util.getTodayDate())
        .typeText(clientInformation.domesticPartner, data.getClient().domesticPartner)
        .typeText(clientInformation.outToBidReason, data.getClient().outToBidReason)
        .click(clientInformation.saveContinue)
        .click(clientProductsTab.medicalProduct)
        .expect(clientProductsTab.dentalVirgin.exists).ok()
        .click(clientProductsTab.dentalVirgin)
        .click(clientProductsTab.visionProduct)
        .expect(clientProductsTab.saveContinue.exists).ok()
        .click(clientProductsTab.saveContinue)
        .click(informationTab.howDoYouGetPaidPercent)
        .typeText(informationTab.yourCommission, data.getClient().yourCommission)
        .click(informationTab.saveContinue)
        .typeText(currentOptionsTab.carrier, data.getClient().carrier)
        .typeText(currentOptionsTab.incumbentPlanName, data.getClient().incumbentPlanName)
        .click(currentOptionsTab.saveContinue)
        .typeText(contributionTab.howMuchDoesTheEmployerContribute, data.getClient().howMuchDoesTheEmployerContribute)
        .click(contributionTab.outOfStateContribution)
        .typeText(contributionTab.outOfStateContributionValue, data.getClient().outOfStateContributionValue)
        .click(contributionTab.saveContinue)
        .typeText(plansQuoteTab.additionalRequests, data.getClient().additionalRequests)
        .click(plansQuoteTab.saveContinue)
        .expect(addTeamTab.setTeam.exists).ok()
        .expect(addTeamTab.selectTeamHeader.textContent).eql(data.getClient().selectTeamHeader)
        .click(addTeamTab.saveContinue)
        .expect(sendToUhc.hint.textContent).eql(data.getClient().hint)
        .click(sendToUhc.submitToAnthem)

});


