#!groovy
pipeline {
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '10'))
    overrideIndexTriggers(true)
  }
  agent {
    node {
      label 'buildfarm'
    }
  }
  tools {
    maven 'maven'
  }
  environment {
    DB_URL = 'jdbc:mysql://rds-unittest.cbogremexott.us-east-1.rds.amazonaws.com:3306/br_dev'

    DB_USERNAME = 'root'
    DB_PASSWORD = credentials('UNIT_TEST_DB_PASSWORD')

    DB_DATA_ENCRYPTION_ENABLED = 'false'
    DB_DATA_ENCRYPTION_PASSWORD = credentials('UNIT_TEST_DB_ENCRYPTION_PASSWORD')

    HSM_IP = '172.31.64.149'
    HSM_PARTITION = 'PARTITION_1'

    DEV_TOKEN_ID = 'AKIAIEV2Q2CEUNPABDKA'
    DEV_TOKEN_SECRET = credentials('AWS_DEV_ACCESS_SECRET')

    HSM_USER = 'br_app'
    HSM_PASSWORD = credentials('HSM_PASSWORD')

    PROD_TOKEN_ID = 'AKIAJ6XKUDVFMYBEV2GQ'
    PROD_TOKEN_SECRET = credentials('PROD_AWS_ACCESS_SECRET')
    // PROD_HSM_IP = ''

    COVERALLS_REPO_TOKEN = credentials('BROKER_APPLICATION_SERVICE_COVERALLS_TOKEN')
    COVERALLS_SERVICE_NAME = 'Jenkins'
  }
  stages {
    stage('Setup') {
      steps {
        ws("${BUILD_TAG}") {
          wrap([$class: 'BuildUser']) {
            slackSend message: "Starting build: ${JOB_NAME} ${BUILD_DISPLAY_NAME} caused by ${env.CHANGE_AUTHOR}: ${RUN_DISPLAY_URL}"
          }
          checkout([
            $class: 'GitSCM',
            branches: [[name: '${BRANCH_NAME}']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[
              credentialsId: '81e0269c-8b0b-4eeb-97f2-03da4cb75100',
              url: 'https://github.com/BenRevo/broker-application-service.git'
            ]]
          ])
          sh '''
#!/bin/bash -xe

export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET

mvn clean install -q -B -U -DskipTests=true -Dsilent=true -s .s3.settings.xml
          '''
        }
      }
    }
    stage('Test') {
      steps {
        ws("${BUILD_TAG}") {
          sh '''
#!/bin/bash -xe

export APP_CARRIER="BENREVO"

if [ "${GIT_BRANCH}" = "develop" ]
then
    export APP_ENV="dev"
    export AWS_REGION="us-west-2"
    export AWS_REGION_NAME="us-west-2"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export APP_ENV="dev"
    export AWS_REGION="us-east-1"
    export AWS_REGION_NAME="us-east-1"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export APP_ENV="prod"
    export AWS_REGION="us-west-2"
    export AWS_REGION_NAME="us-west-2"
    export AWS_ACCESS_KEY_ID=$PROD_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_TOKEN_SECRET
fi

mvn clean install -s .s3.settings.xml -B -V -U
          '''
jacoco exclusionPattern: '**/test*', execPattern: '**/target/jacoco.exec'
        }
      }
    }
    /*stage('Dependency Check') {
      steps {
        dependencyCheckAnalyzer([
          datadir: "/var/jenkins_home/.m2/repository/org/owasp/dependency-check-data/",
          hintsFile: "",
          includeCsvReports: false,
          includeHtmlReports: false,
          includeJsonReports: false,
          includeVulnReports: false,
          isAutoupdateDisabled: false,
          outdir: "",
          scanpath: "",
          skipOnScmChange: false,
          skipOnUpstreamChange: false,
          suppressionFile: "",
          zipExtensions: 'zip,jar'
        ])
      }
    }*/
    stage('Deploy') {
      steps {
        ws("${BUILD_TAG}") {
          sh '''
#!/bin/bash -xe

export CARRIER="BENREVO"
mkdir ./.elasticbeanstalk

if [ "${GIT_BRANCH}" = "develop" ]
then
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="dev-benrevo-broker-be"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET

    cp ./internal/deploy/dev/config.yml ./.elasticbeanstalk/
fi

if [ "${GIT_BRANCH}" = "stage" ]
then
    export AWS_REGION_NAME="us-east-1"
    export AWS_DEPLOY_NAME="be-broker-stage"
    export AWS_ACCESS_KEY_ID=$DEV_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$DEV_TOKEN_SECRET

    cp ./internal/deploy/stage/config.yml ./.elasticbeanstalk/
fi

if [ "${GIT_BRANCH}" = "master" ]
then
    export AWS_REGION_NAME="us-west-2"
    export AWS_DEPLOY_NAME="prod-benrevo-broker-be"
    export AWS_ACCESS_KEY_ID=$PROD_TOKEN_ID
    export AWS_SECRET_ACCESS_KEY=$PROD_TOKEN_SECRET

    cp ./internal/deploy/prod/config.yml ./.elasticbeanstalk/
fi

if [ "$(aws sts get-caller-identity | grep -c 'UserId')" -eq 1 ]
then
    echo "##### Successful authorization from AWS"
fi

eb deploy $AWS_DEPLOY_NAME --label "$BUILD_TAG" --verbose --staged --timeout 60
          '''
        }
      }
    }
  }
  post {
    /*always {
      dependencyCheckPublisher([
        canComputeNew: false,
        defaultEncoding: "",
        healthy: "",
        unHealthy: "",
        pattern: "",
        shouldDetectModules: true
      ])
    }*/
    failure {
      wrap([$class: 'BuildUser']) {
        slackSend color: "danger", message: "Build failed: ${JOB_NAME} ${BUILD_DISPLAY_NAME} caused by ${env.CHANGE_AUTHOR}. Build results: ${RUN_DISPLAY_URL}"
        emailext body: '${JOB_NAME} ${BUILD_DISPLAY_NAME} - failed: Check console output at ${RUN_DISPLAY_URL} to view the results.', recipientProviders: [[$class: 'CulpritsRecipientProvider']], subject: 'Build failed: ${JOB_NAME} ${BUILD_DISPLAY_NAME}'
      }
    }
    success {
      wrap([$class: 'BuildUser']) {
        slackSend color: "good", message: "Build success: ${JOB_NAME} ${BUILD_DISPLAY_NAME} caused by ${env.CHANGE_AUTHOR}. Build results: ${RUN_DISPLAY_URL}"
        emailext body: '${JOB_NAME} ${BUILD_DISPLAY_NAME} - success: Check console output at ${RUN_DISPLAY_URL} to view the results.', recipientProviders: [[$class: 'CulpritsRecipientProvider']], subject: 'Build success: ${JOB_NAME} ${BUILD_DISPLAY_NAME}'
      }
    }
  }
}
