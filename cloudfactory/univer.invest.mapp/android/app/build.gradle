import com.android.build.OutputFile
import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: "com.android.application"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.appdistribution"
apply plugin: "com.google.firebase.crashlytics"

buildscript {
  repositories {
    google()
  }
}

// EOF
project.ext.vectoricons = [
  iconFontNames: ['*.ttf', '*.otf'],
  iconFontsDir: '../../src/assets/fonts'
]
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

///
// dafanasiev: add react-native-config config map (flavor name -> file name)
// debug & release because of bug in line 'if (task.name.toLowerCase() == "generate"+envConfigName+"buildconfig") {' of react-native-config
project.ext.envConfigFiles = [
    developmentdebug: "config/development.android.env",
    developmentrelease: "config/development.android.env",

    stagingdebug: "config/staging.android.env",
    stagingrelease: "config/staging.android.env",

    previewdebug: "config/preview.android.env",
    previewrelease: "config/preview.android.env",

    preproductiondebug: "config/preproduction.android.env",
    preproductionrelease: "config/preproduction.android.env",

    productiondebug: "config/production.android.env",
    productionrelease: "config/production.android.env"
]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

def gCurrentFlavor = getCurrentFlavor()

 // it should be a positive integer
def gAppVersionCode = Integer.valueOf(System.env.CI_BUILD_NUMBER ?: 1)

//see how to define in config/ci_refresh_build_const.sh:
def gAppVersionName = "0.0.2"
def gAppVersionHash = System.env.CI_BUILD_REVISION ?: 'NA'
def gAppVersionBranch = System.env.CI_BUILD_BRANCH ?: 'NA'

def gApplicationPackage = "univer.invest.mapp"
def gApplicationId = project.ext.env.get("APP_ID_ANDROID")
def gAppDisplayName = project.ext.env.get("DISPLAY_NAME")

def gSslPinningEnforcePolicy = project.ext.env.get("SSL_PINNING_ENFORCE_POLICY")
def gSslPinningCertificates = project.ext.env.get("SSL_PINNING_CERTIFICATES")

if (gApplicationId == null) {
    gApplicationId = "APPLICATION_ID_NOT_SET"
}

if (gAppDisplayName == null) {
    gAppDisplayName = "APPLICATION_DISPLAY_NAME_NOT_SET"
}

println ("[INFO] Building using .env values:")
println ("[INFO]   >gApplicationId :" + gApplicationId)
println ("[INFO]   >gAppDisplayName:" + gAppDisplayName)

/**
 * Temporary solution, need to be removed before publishing to production!
 * Patch react-native-webview library to allow insecure connections.
 **/
if (gCurrentFlavor == "preproductiondebug" || gCurrentFlavor == "preproductionrelease") {
  println ("[INFO] Patch react-native-webview")
  exec {
    commandLine 'sh', '-c', '(cd ../.. && git apply ./react_native_webview_patch/react-native-webview.patch)'
  }
}

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-formatfproject.ext.react = [
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

// enshure that directory exists
if(!(new File("$buildDir/outputs").exists())) {
    mkdir("$buildDir/outputs")
}

project.ext.react = [
    entryFile: "index.js",
    bundleAssetName: "index.android.bundle",
    bundleInDebug: false,
    bundleInStaging: true,
    bundleInRelease: true,
    enableHermes: true,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Do not codesign these apks
 */
def enableAPKSigning = (gCurrentFlavor != "productiondebug" && gCurrentFlavor != "productionrelease")
//                         && gCurrentFlavor != "preproductiondebug" && gCurrentFlavor != "preproductionrelease")

/**
 * Set this to true to create separate APKs instead of one:
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = (gCurrentFlavor == "productiondebug"
                                          || gCurrentFlavor == "productionrelease")

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId gApplicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode gAppVersionCode
        versionName gAppVersionName
        multiDexEnabled true
        resValue "string", "build_config_package", gApplicationPackage

        resValue "string", "app_version_code", "" + gAppVersionCode
        resValue "string", "app_version_name", gAppVersionName
        resValue "string", "app_version_hash", gAppVersionHash
        resValue "string", "app_version_branch", gAppVersionBranch
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // https://firebase.google.com/docs/app-distribution/android/distribute-gradle#3_configure_your_distribution_properties
            firebaseAppDistribution {
                groups = project.ext.env.get("FIREBASE_DISTRIBUTION_GROUPS")
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file("../sign/app.jks")
            storePassword "123456"
            keyAlias "univer.invest.mapp"
            keyPassword "123456"
            v2SigningEnabled true
        }
        release {
            storeFile file("../sign/app.jks")
            storePassword "123456"
            keyAlias "univer.invest.mapp"
            keyPassword "123456"
            v2SigningEnabled true
        }
    }

    flavorDimensions "main"

    productFlavors {
        development {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig enableAPKSigning ? signingConfigs.debug : null

            versionName gAppVersionName + "-development"
        }
        staging {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig enableAPKSigning ? signingConfigs.debug : null

            versionName gAppVersionName + "-staging"
        }
        preview {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig enableAPKSigning ? signingConfigs.debug : null

            versionName gAppVersionName + "-preview"
        }
        preproduction {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig enableAPKSigning ? signingConfigs.release : null

            versionName gAppVersionName + "-preproduction"
        }
        production {
            dimension "main"
            applicationId gApplicationId
            resValue "string", "app_name", gAppDisplayName
            signingConfig enableAPKSigning ? signingConfigs.release : null

            versionName gAppVersionName + "-production"
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        //def names = variant.flavors*.name
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

            // Filter is null for universal APKs.
            def filter = output.getFilter(OutputFile.ABI)

            // if apl is universal apk upload to firebase
            if (filter == null) {
                tasks.findAll {
                    it.name.startsWith(
                            "appDistributionUpload${variant.name.capitalize()}")
                }.each {
                    it.doFirst {
                        // set path to the apk
                        it.appDistributionProperties.provider.value.artifactPath = output.outputFile.absolutePath
                    }
                }
            }
        }
    }
}

// https://doc.effectivetrade.ru/pages/viewpage.action?pageId=59279424
configurations.all {
   resolutionStrategy {
        // https://github.com/facebook/react-native/issues/25923#issuecomment-594047945
       force "com.facebook.soloader:soloader:0.9.0"
   }
}

// https://github.com/flutter/flutter/issues/19868#issuecomment-408550356
// com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation project(path: ':react-native-interactable')

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    implementation "com.datatheorem.android.trustkit:trustkit:+"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.biometric:biometric:1.1.0-beta01"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)


afterEvaluate {
    createNetworkSecurityConfig(gSslPinningCertificates, gSslPinningEnforcePolicy, gCurrentFlavor)
}

def createNetworkSecurityConfig(gSslPinningCertificates, gSslPinningEnforcePolicy, gCurrentFlavor) {
    def file = new File(projectDir, '/src/main/res/xml/network_security_config.xml')
    def networkSecurityConfig = new Node(null, 'network-security-config')
    def baseConfig = new Node(networkSecurityConfig, 'base-config')
    def trustAnchors = new Node(baseConfig, 'trust-anchors')
    new Node(trustAnchors, 'certificates', [src: 'system'])
    new Node(trustAnchors, 'certificates', [src: 'user'])

    def isDevelopmentOrStaging = gCurrentFlavor == 'developmentdebug' ||  gCurrentFlavor == 'developmentrelease' ||  gCurrentFlavor == 'stagingdebug' ||  gCurrentFlavor == 'stagingrelease'
    def isDebug = gCurrentFlavor == 'developmentdebug' || gCurrentFlavor == 'stagingdebug' || gCurrentFlavor == 'previewdebug' || gCurrentFlavor == 'preproductiondebug' || gCurrentFlavor == 'productiondebug'

    def domainConfig = new Node(networkSecurityConfig, 'domain-config', [cleartextTrafficPermitted: isDevelopmentOrStaging ? 'true' : 'false'])

    if (isDevelopmentOrStaging || isDebug) {
        new Node(domainConfig, 'domain', [includeSubdomains: 'false'], 'localhost')
    }
    if (isDebug) {
        new Node(domainConfig, 'domain', [includeSubdomains: 'false'], '192.168.0.102')
        new Node(domainConfig, 'domain', [includeSubdomains: 'false'], '192.168.0.118')
        new Node(domainConfig, 'domain', [includeSubdomains: 'false'], '10.0.2.2')
    } else if (gSslPinningEnforcePolicy == 'true' && gSslPinningCertificates) {
        def sslPinningCertificates = new JsonSlurper().parseText(gSslPinningCertificates.replaceAll($/\\/$, ''))
        def pinSet = null

        if (!isDevelopmentOrStaging) {
            new Node(domainConfig, 'trustkit-config', [enforcePinning: gSslPinningEnforcePolicy])
            pinSet = new Node(domainConfig, 'pin-set')
        }

        sslPinningCertificates.each { host, pins ->
            new Node(domainConfig, 'domain', [includeSubdomains: 'true'], host)

            if (!isDevelopmentOrStaging) {
                pins.each { pin, hash ->
                    new Node(pinSet, 'pin', [digest: 'SHA-256'], hash)
                }
            }
        }
    } else {
      if (domainConfig.children().isEmpty()) {
        networkSecurityConfig.remove(domainConfig);
      }
    }
    file.text = groovy.xml.XmlUtil.serialize(networkSecurityConfig)
}

// взято из react-native-config
def getCurrentFlavor() {
    Gradle gradle = getGradle()

    // match optional modules followed by the task
    // (?:.*:)* is a non-capturing group to skip any :foo:bar: if they exist
    // *[a-z]+([A-Za-z]+) will capture the flavor part of the task name onward (e.g., assembleRelease --> Release)
    def pattern = Pattern.compile("(?:.*:)*[a-z]+([A-Z][A-Za-z]+)")
    def flavor = ""

    gradle.getStartParameter().getTaskNames().any { name ->
        Matcher matcher = pattern.matcher(name)
        if (matcher.find()) {
            flavor = matcher.group(1).toLowerCase()
            return true
        }
    }

    return flavor
}
